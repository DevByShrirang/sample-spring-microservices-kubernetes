pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'develop', description: 'Git branch to build')
    }

    environment {
        AWS_REGION        = 'us-east-2'
        ECR_REPO          = '442042505508.dkr.ecr.us-east-2.amazonaws.com'
        SONARQUBE_SERVER  = 'SonarQubeServer'   // Jenkins SonarQube server name
        AWS_CREDENTIALS   = 'aws-credentials'         // AWS credentials ID in Jenkins
        SONAR_PROJECT_KEY = 'microservices-dev' // Project key from SonarQube UI
        SONAR_PROJECT_NAME = 'microservices-dev'
        SONAR_PROJECT_VERSION = "1.0.${BUILD_NUMBER}"
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo "üì• Checking out code from branch: ${params.BRANCH_NAME}"
                git branch: "${params.BRANCH_NAME}", url: 'https://github.com/DevByShrirang/sample-spring-microservices-kubernetes.git'
            }
        }

        stage('Build and Test') {
            when { expression { params.BRANCH_NAME == 'develop' } }
            steps {
                echo "üèóÔ∏è Building code and running unit tests..."
                sh 'mvn clean package -DskipTests=false'
            }
        }

        stage('SonarQube Analysis') {
            when { expression { params.BRANCH_NAME == 'develop' } }
            steps {
                echo "üîç Running SonarQube Code Analysis..."
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                            -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONAR_AUTH_TOKEN
                    """
                }
            }
        }

        stage('Quality Gate') {
            when { expression { params.BRANCH_NAME == 'develop' } }
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    echo "üõ°Ô∏è Waiting for SonarQube Quality Gate result..."
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Docker Build and Push (Dev)') {
            when { expression { params.BRANCH_NAME == 'develop' } }
            steps {
                script {
                    def serviceName = "admin-service"
                    def imageTag = "dev-${BUILD_NUMBER}"
                    def fullImageName = "${ECR_REPO}/${serviceName}:${imageTag}"

                    echo "üê≥ Building Docker image for ${serviceName}..."
                    sh """
                        docker build -t ${serviceName}:${imageTag} ${serviceName}/
                        aws ecr get-login-password --region ${AWS_REGION} \
                            | docker login --username AWS --password-stdin ${ECR_REPO}
                        docker tag ${serviceName}:${imageTag} ${fullImageName}
                        docker push ${fullImageName}
                    """
                }
            }
        }

        stage('Post-Build Cleanup') {
            steps {
                echo "üßπ Cleaning up local Docker images to save space..."
                sh 'docker system prune -f'
            }
        }
    }

    post {
        success {
            echo "‚úÖ Build pipeline completed successfully for branch: ${params.BRANCH_NAME}!"
        }
        failure {
            echo "‚ùå Build failed for branch: ${params.BRANCH_NAME}."
        }
    }
}

